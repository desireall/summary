protobuf
https://www.ibm.com/developerworks/cn/linux/l-cn-gpb/
http://blog.csdn.net/zxhoo/article/details/53228303

http://blog.csdn.net/carson_ho/article/details/70568606

1.相关 名词
    类似的框架  
        avro框架
	http://www.cnblogs.com/cocos2014/p/4259037.html
	

    关键点 
        数值压缩存储方法Varint
		http://www.cnblogs.com/smark/archive/2012/05/03/2480034.html

		http://izualzhy.cn/c/cpp/2016/08/17/protobuf-encode-varint-and-zigzag
	
	Google Protocol Buffer 字节序采用 little-endian 的方式   网络协议的字节序 采用的 big-endian (java 采用的也是 big-endian)
	  所以proto buf进行解析的时候需要进行 字节序的 转换

	数据采用 Key-Pair 结构无需使用分隔符来分割不同的 Field

	 zigzag 编码
	 http://blog.csdn.net/zgwangbo/article/details/51590186
	

2. proto buf的 encoding的流程
http://blog.csdn.net/yansmile1/article/details/58151026
http://blog.csdn.net/zxhoo/article/details/53228303



optional 类型的filed  没有赋值就不进行序列化

数据采用 Key-Pair 结构无需使用分隔符来分割不同的 Field

filed 序列化之后的 数据格式  key value key value 
key = tag << 3 | write_type


key中使用3个bit表示write_type 足够了
write_type的类型
0  varint    int32, int64, uint32, uint64, sint32, sint64, bool, enum
1  64-bit    fixed64, sfixed64, double
2  Length-delimi   string, bytes, embedded messages, packed repeated fields
5  32-bit  fixed32, sfixed32, float

3 4(已弃用)

根据key中write_type的值进行相应的处理 读取value  所以不需要分隔符

!varint 类型
http://www.cnblogs.com/smark/archive/2012/05/03/2480034.html
使用多个byte表示一个数值 可以对小的数值进行压缩处理 去除无意于的bit位
但是 对于负数的 就会有问题 (负数的最高位 为1 无法压缩 需要更多的byte表示)
负数使用 zigzag 映射成正数 再使用 varint 进行压缩

 Varint 是一种紧凑的表示数字的方法。它用一个或多个字节来表示一个数字，值越小的数字使用越少的字节数。这能减少用来表示数字的字节数


Length-delimi 类型的编码的二进制结构 key value的长度 value
32-bit 64-bit 类型的长度是定长的(大数使用的定长的 相较于 varint 更有优势)



问题(1) protocol buffer中为什么同时出现int32类型，uint32,sint32类型？
sint32使用zigzag进行编码，主要是为了节省传输量，在大多数业务中会使用到负数，但是负数取值都很小例如-1、-2之类的如果使用int32传输量是10个字节，sint32只有1个字节。
因为int32会强制转换成uint64，在序列化时使用varint编码，每个字节用7位，64位需要10个字节。这时候无论是传输量还是性能都比不上fixed32


问题(2) 对于int32类型的负数，protobuf强制编码成10个字节，理论上5个字节就够了。
Protobuf想让int32和int64在编码格式上兼容，int32会强制转换成uint64，在序列化时使用varint编码，每个字节用7位，64位需要10个字节

问题(3) proto buf怎么实现的跨语言 跨平台
不同的语言根据.proto协议文件 生成相应的该语言代码 进而进行相应的序列化反序列化





flatbuff  与  protobuf 的性能比较
https://blog.csdn.net/menggucaoyuan/article/details/34409433



